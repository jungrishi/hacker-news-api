{"version":3,"sources":["component/Loading.jsx","utils/BaseUrl.js","component/Comment.js","component/Story.js","component/ListStory.jsx","component/withFetchData.js","component/NotFound.jsx","App.js","serviceWorker.js","index.js"],"names":["styles","display","position","top","left","transform","a","justifyContent","alignItems","Loading","props","react_default","createElement","style","i","dist_default","name","color","fadeIn","rootUrl","getUrl","appendUrl","Comment","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","kids","undefined","isLoaded","depth","fetchComment","id","_this2","fetch","concat","then","res","json","setState","className","Fragment","by","dangerouslySetInnerHTML","__html","text","length","map","kid","index","key","component_Loading","Component","Story","commentID","location","console","log","title","component_Comment","withFetchData","App","url","passState","list","react_router_dom","to","pathname","_Component","Post","stories","inherits","createClass","value","response","slice","fetchStory","storiesId","_this3","actions","Promise","all","assign","NotFound","react_router","exact","path","component","ListStory","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2cfbaaa.chunk.js","sourcesContent":["import React from 'react'\nimport Spinner from 'react-spinkit';\nimport '../styles/listing.css';\n\nconst styles = {\n    'display': 'block',\n    'position': 'absolute',\n    'top': 50 + '%',\n    'left': 50 + '%',\n    'transform': 'transition(-50%, -50%)'\n}\n\nconst a = {\n    'display': 'flex',\n    'justifyContent': 'center',\n    'alignItems': 'center', \n}\n\n\nfunction Loading(props) {\n    return (\n        <div style={props.i == 1 ? styles: a}>\n            <Spinner name=\"ball-pulse-sync\" color=\"blue\" fadeIn='half'/>\n            </div>\n    )\n}\n\nexport default Loading;","const rootUrl = 'https://hacker-news.firebaseio.com/v0/';\n\nfunction getUrl(appendUrl) {\n    return rootUrl + appendUrl;\n}\n\nexport default getUrl;","import React, { Component } from 'react';\nimport Loading from './Loading';\nimport getUrl from '../utils/BaseUrl';\nimport '../styles/listing.css';\n// import Label from './Label'; \n\nclass Comment extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            kids: undefined,\n            isLoaded: false,\n            depth: 3\n        }\n    this.i =0;    \n    }\n\n    componentDidMount() {\n        this.fetchComment(this.props.id)\n   }\n\n    fetchComment(id) {\n        fetch(getUrl(`item/${id}.json`))\n        .then(res => res.json())\n        .then(data => {\n            let kids;\n            if(data) {\n                kids = data.kids || [];\n                this.setState({\n                    data: data,\n                    kids: kids,\n                    isLoaded: !this.isLoaded,\n                })   \n            }\n        })   \n    }\n    render() {\n        return (\n            <div className=\"hello\">\n                {!this.state.isLoaded ? <Loading />\n                    :<>                    \n                    <h3>{this.state.data.by}</h3>\n                    <div className=\"text\"\n                            dangerouslySetInnerHTML={{ __html: this.state.data.text }}>\n                        </div>\n                        <div className=\"child\">\n                        {this.state.kids && this.state.kids.length > 0 &&   \n                            (this.state.kids.map((kid, index) => (\n                                <div key={index} className=\"descendant-comment\">\n                              <Comment  id={kid} />\n                              </div>\n                              )\n                        ))\n                        }\n                        </div>\n                      \n                    </>     \n                    }\n            </div>\n        )\n    }\n}\n\nexport default Comment;","import React, { Component } from 'react';\nimport Comment from './Comment';\nimport '../styles/listing.css';\n\nclass Story extends Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            commentID : this.props.location.state.data.kids,\n        }\n    }\n\n    render() {\n        console.log(this.state.commentID)\n        return (\n            <div className=\"pageWrapper\">\n                <h2>{this.props.location.state.data.title}</h2>\n                <ul>\n                <li className=\"comments\">\n                    {this.state.commentID && this.state.commentID.length > 0 && (   \n                            this.state.commentID.map((kid, index) => (\n                            <Comment key={index} id={kid} />\n                        )\n                    ))}\n                    </li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Story;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport withFetchData from './withFetchData';\n\nfunction ListStory(props) {\n    return (\n        <>\n            {props.passState.map(list => (\n                <li key={list.id}>\n                 <a><Link\n                        to={{\n                            pathname: `/stories/${list.id}`,\n                            state: {data: list} }} >        \n                            {list.title}\n                    </Link>  \n                  </a>    \n                </li>\n            ))}\n        </>\n    )\n}\n\nexport default withFetchData(ListStory,'topstories.json')\n","import React, { Component } from 'react';\nimport getUrl from '../utils/BaseUrl';\nimport Loading from './Loading';\n\n\nexport default (App, url) =>  {\nconsole.log(url)\n return class Post extends Component {\n        constructor(props) {\n        super(props);\n        this.state = {\n            stories: [],\n            isLoaded: false,\n            i: 0\n        }\n    }\n\n    componentDidMount() {\n        fetch(getUrl(url))\n        .then(response => response.json())\n        .then(data => {\n            data = data.slice(0, 10);\n            this.fetchStory(data)})   \n    }\n\n    fetchStory(storiesId, i){\n        let actions = storiesId.map(id=>fetch(getUrl(`/item/${id}.json`))\n        .then(data => data.json()));\n        let result = Promise.all(actions);\n        result.then(res => {\n            this.setState({\n                stories: res,\n                isLoaded: true,\n                i: this.state.i\n            })\n            console.log('img')\n        })\n    }\n\n\n    render() {\n        console.log(url)\n\n        return (\n            <div>\n                <ul className=\"listing\">\n                    {this.state.isLoaded === false\n                                                    ?<Loading i='1' />\n                                                    :<App \n                                                    passState = {this.state.stories} {...this.props}/>}\n                </ul>\n            </div>\n        )\n    }\n}\n}\n\n","import React from 'react'\n\nexport default function NotFound() {\n    return (\n        <div>\n            <p>Click Hacker News to continue</p>\n        </div>\n    )\n}\n\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport Story from './component/Story';\nimport ListStory from './component/ListStory';\nimport './styles/listing.css';\nimport NotFound from './component/NotFound';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <>\n      {/* <h1>Header</h1> */}\n      <Router>\n        <h1><a><Link\n                    to={{\n                    pathname: `/`}}>Hacker News        \n                </Link>  \n            </a>    \n          </h1>\n        \n         {/* <ListStory/> */}\n          <Route exact path=\"/stories/:storyId\" component={Story} />\n          <Route exact path=\"/\" component={ListStory} />\n          <Route component={NotFound} />\n        </Router>\n      </>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}