{"version":3,"sources":["component/Loading.jsx","utils/BaseUrl.js","component/Comment.js","component/Story.js","component/ListStory.jsx","component/withFetchData.js","App.js","serviceWorker.js","index.js"],"names":["Loading","react_default","a","createElement","rootUrl","getUrl","appendUrl","Comment","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","kids","undefined","isLoaded","fetchComment","id","_this2","fetch","concat","then","res","json","setState","className","dangerouslySetInnerHTML","__html","text","length","map","kid","index","key","component_Loading","Component","Story","commentID","location","console","log","title","component_Comment","withFetchData","App","url","passState","list","react_router_dom","to","pathname","_Component","Post","stories","i","inherits","createClass","value","response","slice","fetchStory","storiesId","_this3","actions","Promise","all","assign","Fragment","react_router","exact","path","component","ListStory","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf8a79ee.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Loading() {\n    return (\n        <div>\n            <p>Loading</p>\n        </div>\n    )\n}\n\nexport default Loading;\n","const rootUrl = 'https://hacker-news.firebaseio.com/v0/';\n\nfunction getUrl(appendUrl) {\n    return rootUrl + appendUrl;\n}\n\nexport default getUrl;","import React, { Component } from 'react';\nimport Loading from './Loading';\nimport getUrl from '../utils/BaseUrl';\nimport '../styles/listing.css';\n\nclass Comment extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            kids: undefined,\n            isLoaded: false\n        }\n    }\n\n    componentDidMount() {\n        this.fetchComment(this.props.id)\n   }\n\n    fetchComment(id) {\n        fetch(getUrl(`item/${id}.json`))\n        .then(res => res.json())\n        .then(data => {\n            let kids;\n            if(data) {\n                kids = data.kids || [];\n                this.setState({\n                    data: data,\n                    kids: kids,\n                    isLoaded: !this.isLoaded\n                })   \n            }\n        })   \n    }\n    render() {\n        return (\n            <div>\n                {!this.state.isLoaded ? <Loading />\n                    :<li className=\"text\"><div\n                            dangerouslySetInnerHTML={{ __html: this.state.data.text }}>\n                        </div>\n                        {this.state.kids && this.state.kids.length > 0 &&\n                            (this.state.kids.map((kid, index) => (\n                              <Comment key={index} id={kid} />)\n                        ))}\n                    </li>        \n                }\n            </div>\n        )\n    }\n}\n\nexport default Comment;","import React, { Component } from 'react';\nimport Comment from './Comment';\nimport '../styles/listing.css';\n\nclass Story extends Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            commentID : this.props.location.state.data.kids,\n        }\n    }\n\n    render() {\n        console.log(this.state.commentID)\n        return (\n            <div className=\"pageWrapper\">\n                <h2>{this.props.location.state.data.title}</h2>\n                <ul>\n                    {this.state.commentID && this.state.commentID.length > 0 && (   \n                            this.state.commentID.map((kid, index) => (\n                            <Comment key={index} id={kid} />\n                        )\n                    ))}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Story;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport withFetchData from './withFetchData';\n\nfunction ListStory(props) {\n    return (\n        <ul className=\"listing\">\n            {props.passState.map(list => (\n                <li key={list.id}>\n                 <a><Link\n                        to={{\n                            pathname: `/stories/${list.id}`,\n                            state: {data: list} }} >        \n                            {list.title}\n                    </Link>  \n                  </a>    \n                </li>\n            ))}\n        </ul>\n    )\n}\n\nexport default withFetchData(ListStory,'topstories.json')\n","import React, { Component } from 'react';\nimport getUrl from '../utils/BaseUrl';\nimport Loading from './Loading';\n\n\nexport default (App, url) =>  {\nconsole.log(url)\n return class Post extends Component {\n        constructor(props) {\n        super(props);\n        this.state = {\n            stories: [],\n            isLoaded: false,\n            i: 0\n        }\n    }\n\n    componentDidMount() {\n        fetch(getUrl(url))\n        .then(response => response.json())\n        .then(data => {\n            data = data.slice(0, 10);\n            this.fetchStory(data)})   \n    }\n\n    fetchStory(storiesId, i){\n        let actions = storiesId.map(id=>fetch(getUrl(`/item/${id}.json`))\n        .then(data => data.json()));\n        let result = Promise.all(actions);\n        result.then(res => {\n            this.setState({\n                stories: res,\n                isLoaded: true,\n                i: this.state.i\n            })\n            console.log('img')\n        })\n    }\n\n\n    render() {\n        console.log(url)\n\n        return (\n            <div>\n                <ul>\n                    {this.state.isLoaded === false\n                                                    ?<Loading />\n                                                    :<App \n                                                    passState = {this.state.stories} {...this.props}/>}\n                </ul>\n            </div>\n        )\n    }\n}\n}\n\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport Story from './component/Story';\nimport ListStory from './component/ListStory';\nimport './styles/listing.css';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <>\n      <h1>Header</h1>\n        {/* <h1><a><Link\n                        to={{\n                            pathname: `/`}}>Hacker News        \n                    </Link>  \n                  </a>    </h1> */}\n        <Router>\n          <Route exact path=\"/\" component={ListStory}/>\n          <Route exact path=\"/stories/:storyId\" component={Story} />\n        </Router>\n      </>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}